@page "/login"
@layout NoLayout
@using System.ComponentModel.DataAnnotations
@using Common
@using Microsoft.AspNetCore.Components
@inject NavigationManager Navigation
@rendermode InteractiveServer

<div class="flex min-h-full flex-col justify-center px-6 py-12 lg:px-8">
  <div class="sm:mx-auto sm:w-full sm:max-w-sm bg-white p-8 rounded-lg shadow-2xl">
    <h2 class="mt-2 text-center text-2xl/9 font-bold tracking-tight text-gray-900">Área Administrativa</h2>

    @if (!string.IsNullOrEmpty(ErrorMessage))
    {
        <div class="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative mb-4" role="alert">
            <span class="block sm:inline">@ErrorMessage</span>
        </div>
    }

    <EditForm Model="@loginModel" OnValidSubmit="@HandleLogin" class="space-y-6" FormName="login">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div>
            <label for="username" class="block text-sm/6 font-medium text-gray-900">Usuário</label>
            <div class="mt-2">
                <InputText id="username" @bind-Value="loginModel.Username" 
                         class="block w-full rounded-md border-0 px-3 py-1.5 text-base text-gray-900 ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-primary sm:text-sm/6"
                         placeholder="Digite seu usuário" />
            </div>
        </div>

        <div>
            <div class="flex items-center justify-between text-primary">
                <label for="password" class="block text-sm/6 font-medium text-gray-900">Palavra-passe</label>
                <div class="text-sm">
                    <a href="#" class="font-semibold text-primary">Esqueceu sua palavra-passe?</a>
                </div>
            </div>
            <div class="mt-2">
                <InputText id="password" @bind-Value="loginModel.Password" type="password"
                         class="block w-full rounded-md border-0 px-3 py-1.5 text-base text-gray-900 ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-primary sm:text-sm/6"
                         placeholder="Digite sua senha" />
            </div>
        </div>

        <div>
            <button type="submit" disabled="@isLoading"
                    class="flex w-full justify-center rounded-md bg-primary px-3 py-1.5 text-sm/6 font-semibold text-white hover:bg-primary-dark focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-primary disabled:opacity-50 disabled:cursor-not-allowed">
                @if (isLoading)
                {
                    <span>Autenticando...</span>
                }
                else
                {
                    <span>Entrar</span>
                }
            </button>
        </div>
    </EditForm>
  </div>
</div>

@code {
    private LoginModel loginModel = new LoginModel();
    private string ErrorMessage = string.Empty;
    private bool isLoading = false;

    protected override void OnInitialized()
    {
        // Verificar se já está autenticado e redirecionar se necessário
        if (IsUserAuthenticated())
        {
            Navigation.NavigateTo("/dashboard/resume");
        }
    }

    private async Task HandleLogin()
    {
        isLoading = true;
        ErrorMessage = string.Empty;
        
        try
        {
            var user = await UserService.LoginAsync(loginModel.Username, loginModel.Password);
            
            if (user != null)
            {
                // Simular autenticação bem-sucedida
                await SimulateAuthentication(user);
                Navigation.NavigateTo("/dashboard/resume", forceLoad: true);
            }
            else
            {
                ErrorMessage = "Credenciais inválidas. Por favor, tente novamente.";
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = "Erro ao tentar fazer login. Tente novamente mais tarde.";
            Console.WriteLine($"Erro no login: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task SimulateAuthentication(UserDto user)
    {
        // Simular armazenamento da sessão (em produção, use authentication state)
        await Task.Delay(100); // Simular operação assíncrona
        
        // Aqui você pode armazenar em localStorage, sessionStorage ou usar AuthenticationStateProvider
        // Exemplo simples para demonstração:
        Console.WriteLine($"Usuário autenticado: {user.Username}");
    }

    private bool IsUserAuthenticated()
    {
        // Verificar se o usuário está autenticado (implementação simplificada)
        // Em produção, use AuthenticationStateProvider ou verifique tokens/cookies
        return false; // Sempre retorna false para forçar login
    }

    public class LoginModel
    {
        [Required(ErrorMessage = "Usuário é obrigatório")]
        public string Username { get; set; } = string.Empty;

        [Required(ErrorMessage = "Senha é obrigatória")]
        public string Password { get; set; } = string.Empty;
    }
}