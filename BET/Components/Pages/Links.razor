@page "/links"
@rendermode InteractiveServer
@using Common

<div class="bg-white">
    <div class="relative isolate px-6 pt-14 lg:px-8">
        <div class="mx-auto max-w-2xl py-32 sm:py-48 lg:py-56">
            <div class="text-center">
                <h1 class="text-5xl font-semibold tracking-tight text-balance text-gray-900 sm:text-7xl">Todos os Nossos
                    Links de Apostas</h1>
                <p class="mt-8 text-lg font-medium text-pretty text-gray-600 sm:text-xl/8">Aqui estão todos os links que
                    você precisa para começar a apostar. Clique, cadastre-se e aproveite os bônus especiais que
                    preparamos para você.</p>
            </div>
        </div>
    </div>

    <div class="mx-auto max-w-7xl px-6 lg:px-8">
        @if (isLoading)
        {
            <div class="flex justify-center py-12">
                <div class="w-10 h-10 border-4 border-t-primary border-gray-300 rounded-full animate-spin"></div>
            </div>
        }
        else if (ListLinks.Count == 0)
        {
            <div class="text-center py-12">
                <p class="text-gray-500 text-lg">Nenhum link disponível no momento.</p>
            </div>
        }
        else
        {
            <div class="mt-10 grid gap-8 sm:grid-cols-2 lg:grid-cols-3">
                @foreach (var link in ListLinks)
                {
                    <div
                        class="bg-white rounded-2xl shadow-lg overflow-hidden flex flex-col border border-gray-200 card hover:shadow-xl transition-shadow duration-300">
                        <img src="@link.ImageUrl" alt="@link.Name" class="h-48 w-full object-cover"/>
                        <div class="p-6 flex-1 flex flex-col">
                            <div class="flex justify-between items-start mb-2">
                                <h3 class="text-xl font-bold text-gray-900">@link.Name</h3>
                                @if (link.IsHighlighted)
                                {
                                    <span
                                        class="px-2 py-1 text-xs font-medium rounded-full bg-green-100 text-green-700">
                                        Destaque
                                    </span>
                                }
                            </div>
                            <p class="mt-2 text-gray-600 flex-1 line-clamp-3" style="@lineClampStyle">
                                @link.Description
                            </p>
                            <div class="mt-3">
                                <span class="font-medium text-gray-700 text-sm">Bônus:</span>
                                <p class="text-gray-600 text-sm line-clamp-2"
                                   style="@lineClampStyle">@link.BonusInfo</p>
                            </div>
                            <div class="mt-4 flex space-x-2">
                                <a href="@link.AffiliateUrl" target="_blank"
                                   class="flex-1 inline-flex items-center justify-center rounded-xl bg-primary px-4 py-2 text-white font-semibold hover:bg-primary transition text-center">
                                    Acessar
                                    <svg class="ml-2 h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                              d="M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14"/>
                                    </svg>
                                </a>
                                <button @onclick="() => ShowLinkDetails(link)"
                                        class="inline-flex items-center justify-center rounded-xl bg-gray-100 px-4 py-2 text-gray-700 font-semibold hover:bg-gray-200 transition">
                                    <svg class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                              d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"/>
                                    </svg>
                                </button>
                            </div>
                        </div>
                    </div>
                }
            </div>

            @if (showLoadMore)
            {
                <div class="mt-12 text-center pb-12">
                    <button @onclick="LoadMoreLinks"
                            class="inline-flex items-center rounded-xl bg-primary px-8 py-4 text-lg font-semibold text-white shadow-sm hover:bg-primary transition">
                        Carregar Mais Links
                        <svg class="ml-2 -mr-1 h-5 w-5" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20"
                             fill="currentColor">
                            <path fill-rule="evenodd"
                                  d="M10 5a1 1 0 011 1v3h3a1 1 0 110 2h-3v3a1 1 0 11-2 0v-3H6a1 1 0 110-2h3V6a1 1 0 011-1z"
                                  clip-rule="evenodd"/>
                        </svg>
                    </button>
                </div>
            }
        }
    </div>
</div>

<!-- Modal de Detalhes do Link -->
@if (showModal && selectedLink != null)
{
    <div class="fixed inset-0 z-50 overflow-y-auto">
        <!-- Backdrop - deve vir primeiro e ter z-index menor -->
        <div class="fixed inset-0 bg-gray-500 opacity-75 transition-opacity z-40"></div>
        
        <!-- Conteúdo do Modal - deve vir depois e ter z-index maior -->
        <div class="flex min-h-screen items-center justify-center p-4 z-50 relative">
            <div class="relative bg-white rounded-lg text-left overflow-hidden shadow-xl transform transition-all w-full max-w-lg">
                <div class="bg-white px-4 pt-5 pb-4 sm:p-6 sm:pb-4">
                    <div class="sm:flex sm:items-start">
                        <div class="mt-3 text-center sm:mt-0 sm:ml-4 sm:text-left w-full">
                            <h3 class="text-2xl leading-6 font-semibold text-gray-900">
                                @selectedLink.Name
                            </h3>
                            <div class="mt-4">
                                <img src="@selectedLink.ImageUrl" alt="@selectedLink.Name"
                                     class="h-40 w-full object-cover rounded-lg mx-auto">

                                <div class="mt-4">
                                    <p class="text-gray-600">@selectedLink.Description</p>

                                    <div class="mt-4">
                                        <span class="font-medium text-gray-700">Bônus:</span>
                                        <p class="text-gray-600">@selectedLink.BonusInfo</p>
                                    </div>

                                    <div class="mt-4">
                                        <span class="font-medium text-gray-700">Status:</span>
                                        @if (selectedLink.IsHighlighted)
                                        {
                                            <span
                                                class="ml-2 px-2 py-1 text-xs font-medium rounded-full bg-green-100 text-green-700">
                                                Ativo
                                            </span>
                                        }
                                        else
                                        {
                                            <span
                                                class="ml-2 px-2 py-1 text-xs font-medium rounded-full bg-gray-200 text-gray-700">
                                                Inativo
                                            </span>
                                        }
                                    </div>

                                    <div class="mt-4">
                                        <span class="font-medium text-gray-700">URL:</span>
                                        <a href="@selectedLink.AffiliateUrl" target="_blank"
                                           class="block mt-1 text-blue-600 hover:text-blue-800 truncate">
                                            @selectedLink.AffiliateUrl
                                        </a>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="bg-gray-50 px-4 py-3 sm:px-6 sm:flex sm:flex-row-reverse">
                    <a href="@selectedLink.AffiliateUrl" target="_blank"
                       class="w-full inline-flex justify-center rounded-md border border-transparent shadow-sm px-4 py-2 bg-primary text-base font-medium text-white hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary sm:ml-3 sm:w-auto sm:text-sm">
                        Acessar Link
                    </a>
                    <button type="button" @onclick="CloseModal"
                            class="mt-3 w-full inline-flex justify-center rounded-md border border-gray-300 shadow-sm px-4 py-2 bg-white text-base font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary sm:mt-0 sm:ml-3 sm:w-auto sm:text-sm">
                        Fechar
                    </button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private List<AffiliateLinkDto> ListLinks { get; set; } = new();
    private AffiliateLinkDto? selectedLink = null;
    private bool isLoading = true;
    private bool showModal = false;
    private bool showLoadMore = false;
    private int currentPage = 1;
    private const int PageSize = 12;

    protected override async Task OnInitializedAsync()
    {
        await LoadLinks();
    }

    private async Task LoadLinks()
    {
        isLoading = true;
        var allLinks = await LinkService.GetAllAsync();

        // Paginação simples
        ListLinks = allLinks.Take(PageSize).ToList();
        showLoadMore = allLinks.Count > PageSize;

        isLoading = false;
        StateHasChanged();
    }

    private async Task LoadMoreLinks()
    {
        currentPage++;
        var allLinks = await LinkService.GetAllAsync();
        var newLinks = allLinks.Skip((currentPage - 1) * PageSize).Take(PageSize).ToList();

        ListLinks.AddRange(newLinks);
        showLoadMore = allLinks.Count > currentPage * PageSize;
        StateHasChanged();
    }

    private async void ShowLinkDetails(AffiliateLinkDto link)
    {
        selectedLink = link;
        showModal = true;
        StateHasChanged();
    }

    private async void CloseModal()
    {
        showModal = false;
        StateHasChanged();
    }

    // Estilos inline para o efeito de truncate
    private string lineClampStyle = "display: -webkit-box; -webkit-line-clamp: 3; -webkit-box-orient: vertical; overflow: hidden;";
}